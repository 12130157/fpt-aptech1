<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<!--
This document was converted from RTF source: 
By rtftohtml 4.19
See http://www.sunpack.com/RTF
Filename:TIPatterns.rtf
Application Directory:c:\tools\rtf2html\
Subject:
Author:Bruce Eckel
Operator:Bruce Eckel
Document Comments:
Version Comments:
Comments:
Keywords:
Translation Date:09/08/2001
Translation Time:10:16:41
Translation Platform:Win32
Number of Output files:18
This File:TIPatt09.htm
SplitDepth=1
SkipNavPanel=1
SkipLeadingToc=1
SkipTrailingToc=1
GenContents=1
GenFrames=1
GenIndex=1
-->
<HEAD lang="en"><META http-equiv="Content-Type" content="text/html; charset=utf-8">
<TITLE>5: Factories: encapsulating object creation</TITLE>
</HEAD>

<BODY  BGCOLOR="#FFFFFF"><DIV ALIGN="CENTER"><IMG SRC="images/r2hGlyph.gif"></DIV><A NAME="_Toc524504124"></A><A NAME="Heading50"></A><H1 ALIGN="LEFT">
5: Factories: encapsulating object creation</H1>
<DIV ALIGN="LEFT"><FONT FACE="Georgia">When you discover that you need to add
new types to a system, the most sensible first step is to use polymorphism to
create a common interface to those new types. This separates the rest of the
code in your system from the knowledge of the specific types that you are
adding. New types may be added without disturbing existing code ... or so it
seems. At first it would appear that the only place you need to change the code
in such a design is the place where you inherit a new type, but this is not
quite true. You must still create an object of your new type, and at the point
of creation you must specify the exact constructor to use. Thus, if the code
that creates objects is distributed throughout your application, you have the
same problem when adding new types&#8212;you must still chase down all the
points of your code where type matters. It happens to be the <I>creation</I> of
the type that matters in this case rather than the <I>use</I> of the type (which
is taken care of by polymorphism), but the effect is the same: adding a new type
can cause problems.</FONT><BR></DIV>
<DIV ALIGN="LEFT"><FONT FACE="Georgia">The solution is to force the creation of
objects to occur through a common <I>factory</I> rather than to allow the
creational code to be spread throughout your system. If all the code in your
program must go through this factory whenever it needs to create one of your
objects, then all you must do when you add a new object is to modify the
factory. </FONT><BR></DIV>
<DIV ALIGN="LEFT"><FONT FACE="Georgia">Since every object-oriented program
creates objects, and since it&#8217;s very likely you will extend your program
by adding new types, I suspect that factories may be the most universally useful
kinds of design patterns.</FONT><A NAME="_Toc524504125"></A><BR></DIV>
<A NAME="Heading51"></A><H2 ALIGN="LEFT">
Simple Factory method</H2>
<DIV ALIGN="LEFT"><FONT FACE="Georgia">As an example, let&#8217;s revisit the
<B>Shape</B> system.  </FONT><FONT FACE="Georgia">One approach is to make the
factory a <B>static</B> method of the base class:</FONT><BR></DIV>

<PRE>//: c05:shapefact1:ShapeFactory1.java
// A simple static factory method.
package c05.shapefact1;
import java.util.*;
import com.bruceeckel.test.*;

abstract class Shape {
  public abstract void draw();
  public abstract void erase();
  public static Shape factory(String type) {
    if(type.equals("Circle")) return new Circle();
    if(type.equals("Square")) return new Square();
    throw new RuntimeException(
      "Bad shape creation: " + type);
  }
}

class Circle extends Shape {
  Circle() {} // Friendly constructor
  public void draw() { 
    System.out.println("Circle.draw"); 
  }
  public void erase() { 
    System.out.println("Circle.erase"); 
  }
}

class Square extends Shape {
  Square() {} // Friendly constructor
  public void draw() { 
    System.out.println("Square.draw"); 
  }
  public void erase() { 
    System.out.println("Square.erase"); 
  }
}

public class ShapeFactory1 extends UnitTest {
  String shlist[] = { "Circle", "Square", 
    "Square", "Circle", "Circle", "Square" };
  List shapes = new ArrayList();
  public void test() {
    for(int i = 0; i &lt; shlist.length; i++)
      shapes.add(Shape.factory(shlist[i]));
    Iterator i = shapes.iterator();
    while(i.hasNext()) {
      Shape s = (Shape)i.next();
      s.draw();
      s.erase();
    }
  }
  public static void main(String args[]) {
    new ShapeFactory1().test();
  }
} ///:~</PRE><DIV ALIGN="LEFT"><FONT FACE="Georgia">The <B>factory(&#160;)</B>
takes an argument that allows it to determine what type of  <B>Shape</B> to
create; it happens to be a <B>String</B> in this case but it could be any set of
data. The <B>factory(&#160;)</B> is now the only other code in the system that
needs to be changed when a new type of <B>Shape </B>is added (the initialization
data for the objects will presumably come from somewhere outside the system, and
not be a hard-coded array as in the above example).</FONT><BR></DIV>
<DIV ALIGN="LEFT"><FONT FACE="Georgia">To encourage creation to only happen in
the <B>factory(&#160;)</B>, the constructors for the specific types of
<B>Shape</B> are made &#8220;friendly,&#8221; so <B>factory(&#160;)</B> has
access to the constructors but they are not available outside the
package.</FONT><A NAME="_Toc455024532"></A><A NAME="_Toc476705903"></A><A NAME="_Toc524504126"></A><BR></DIV>
<A NAME="Heading52"></A><H2 ALIGN="LEFT">
Polymorphic factories</H2>
<DIV ALIGN="LEFT"><FONT FACE="Georgia">The <B>static factory(&#160;)</B> method
in the previous example forces all the creation operations to be focused in one
spot, so that&#8217;s the only place you need to change the code. This is
certainly a reasonable solution, as it throws a box around the process of
creating objects. However, the <I>Design Patterns</I> book emphasizes that the
reason for the <I>Factory Method</I> pattern is so that different types of
factories can be subclassed from the basic factory (the above design is
mentioned as a special case). However, the book does not provide an example, but
instead just repeats the example used for the <I>Abstract Factory</I>
(you&#8217;ll see an example of this in the next section). Here is
<B>ShapeFactory1.java</B> modified so the factory methods are in a separate
class as virtual functions. Notice also that the specific <B>Shape </B>classes
are dynamically loaded on demand:</FONT><BR></DIV>

<PRE>//: c05:shapefact2:ShapeFactory2.java
// Polymorphic factory methods.
package c05.shapefact2;
import java.util.*;
import com.bruceeckel.test.*;

interface Shape {
  void draw();
  void erase();
}

abstract class ShapeFactory {
  protected abstract Shape create();
  private static Map factories = new HashMap();
  public static void 
  addFactory(String id, ShapeFactory f) {
    factories.put(id, f);
  }
  // A Template Method:
  public static final 
  Shape createShape(String id) {
    if(!factories.containsKey(id)) {
      try {
        // Load dynamically
        Class.forName("c05.shapefact2." + id);
      } catch(ClassNotFoundException e) {
        throw new RuntimeException(
          "Bad shape creation: " + id);
      }
      // See if it was put in:
      if(!factories.containsKey(id))
        throw new RuntimeException(
          "Bad shape creation: " + id);
    }
    return 
      ((ShapeFactory)factories.get(id)).create();
  }
}

class Circle implements Shape {
  private Circle() {}
  public void draw() { 
    System.out.println("Circle.draw"); 
  }
  public void erase() { 
    System.out.println("Circle.erase");
  }
  private static class Factory 
  extends ShapeFactory {
    protected Shape create() { 
      return new Circle(); 
    }
  }
  static {
    ShapeFactory.addFactory(
      "Circle", new Factory());
  }
}

class Square implements Shape {
  private Square() {} 
  public void draw() { 
    System.out.println("Square.draw"); 
  }
  public void erase() { 
    System.out.println("Square.erase"); 
  }
  private static class Factory 
  extends ShapeFactory {
    protected Shape create() { 
      return new Square(); 
    }
  }
  static {
    ShapeFactory.addFactory(
      "Square", new Factory());
  }
}

public class ShapeFactory2 extends UnitTest {
  String shlist[] = { "Circle", "Square", 
    "Square", "Circle", "Circle", "Square" };
  List shapes = new ArrayList();
  public void test() {
    // This just makes sure it will complete 
    // without throwing an exception.
    for(int i = 0; i &lt; shlist.length; i++)
      shapes.add(
        ShapeFactory.createShape(shlist[i]));
    Iterator i = shapes.iterator();
    while(i.hasNext()) {
      Shape s = (Shape)i.next();
      s.draw();
      s.erase();
    }
  }
  public static void main(String args[]) {
    new ShapeFactory2().test();
  }
} ///:~</PRE><DIV ALIGN="LEFT"><FONT FACE="Georgia">Now the factory method
appears in its own class, <B>ShapeFactory</B>, as the <B>create(&#160;)</B>
method. This is a <B>protected</B> method which means it cannot be called
directly, but it can be overridden. The subclasses of <B>Shape</B> must each
create their own subclasses of <B>ShapeFactory</B> and override the
<B>create(&#160;)</B> method to create an object of their own type. The actual
creation of shapes is performed by calling
<B>ShapeFactory.createShape(&#160;)</B>, which is a static method that uses the
<B>Map</B> in <B>ShapeFactory</B> to find the appropriate factory object based
on an identifier that you pass it. The factory is immediately used to create the
shape object, but you could imagine a more complex problem where the appropriate
factory object is returned and then used by the caller to create an object in a
more sophisticated way. However, it seems that much of the time you don&#8217;t
need the intricacies of the polymorphic factory method, and a single static
method in the base class (as shown in <B>ShapeFactory1.java</B>) will work
fine.</FONT><BR></DIV>
<DIV ALIGN="LEFT"><FONT FACE="Georgia">Notice that the <B>ShapeFactory</B> must
be initialized by loading its <B>Map</B> with factory objects, which takes place
in the static initialization clause of each of the <B>Shape</B> implementations.
So to add a new type to this design you must inherit the type, create a factory,
and add the static initialization clause to load the <B>Map</B>. This extra
complexity again suggests the use of a <B>static</B> factory method if you
don&#8217;t need to create individual factory
objects.</FONT><A NAME="_Toc455024533"></A><A NAME="_Toc476705904"></A><A NAME="_Toc524504127"></A><BR></DIV>
<A NAME="Heading53"></A><H2 ALIGN="LEFT">
Abstract factories</H2>
<DIV ALIGN="LEFT"><FONT FACE="Georgia">The <I>Abstract Factory</I> pattern looks
like the factory objects we&#8217;ve seen previously, with not one but several
factory methods. Each of the factory methods creates a different kind of object.
The idea is that at the point of creation of the factory object, you decide how
all the objects created by that factory will be used. The example given in
<I>Design Patterns</I> implements portability across various graphical user
interfaces (GUIs): you create a factory object appropriate to the GUI that
you&#8217;re working with, and from then on when you ask it for a menu, button,
slider, etc. it will automatically create the appropriate version of that item
for the GUI. Thus you&#8217;re able to isolate, in one place, the effect of
changing from one GUI to another.</FONT><BR></DIV>
<DIV ALIGN="LEFT"><FONT FACE="Georgia">As another example suppose you are
creating a general-purpose gaming environment and you want to be able to support
different types of games. Here&#8217;s how it might look using an abstract
factory:</FONT><BR></DIV>

<PRE>//: c05:Games.java
// An example of the Abstract Factory pattern.
import com.bruceeckel.test.*;

interface Obstacle {
  void action();
}

interface Player {
  void interactWith(Obstacle o);
}

class Kitty implements Player {
  public void interactWith(Obstacle ob) {
    System.out.print("Kitty has encountered a ");
    ob.action();
  }
}

class KungFuGuy implements Player {
  public void interactWith(Obstacle ob) {
    System.out.print("KungFuGuy now battles a ");
    ob.action();
  }
}

class Puzzle implements Obstacle {
  public void action() { 
    System.out.println("Puzzle"); 
  }
}

class NastyWeapon implements Obstacle {
  public void action() { 
    System.out.println("NastyWeapon"); 
  }
}

// The Abstract Factory:
interface GameElementFactory {
  Player makePlayer();
  Obstacle makeObstacle();
}

// Concrete factories:
class KittiesAndPuzzles 
implements GameElementFactory {
  public Player makePlayer() { 
    return new Kitty();
  }
  public Obstacle makeObstacle() {
    return new Puzzle();
  }
}

class KillAndDismember 
implements GameElementFactory {
  public Player makePlayer() { 
    return new KungFuGuy();
  }
  public Obstacle makeObstacle() {
    return new NastyWeapon();
  }
}

class GameEnvironment {
  private GameElementFactory gef;
  private Player p;
  private Obstacle ob;
  public GameEnvironment(
    GameElementFactory factory) {
    gef = factory;
    p = factory.makePlayer(); 
    ob = factory.makeObstacle();
  }
  public void play() { p.interactWith(ob); }
}

public class Games extends UnitTest {
  GameElementFactory
    kp = new KittiesAndPuzzles(),
    kd = new KillAndDismember();
  GameEnvironment 
    g1 = new GameEnvironment(kp),
    g2 = new GameEnvironment(kd);
  // These just ensure no exceptions are thrown:
  public void test1() { g1.play(); }
  public void test2() { g2.play(); }
  public static void main(String args[]) {
    Games g = new Games();
    g.test1();
    g.test2();
  }
} ///:~</PRE><DIV ALIGN="LEFT"><FONT FACE="Georgia">In this environment,
<B>Player</B> objects interact with <B>Obstacle</B> objects, but there are
different types of players and obstacles depending on what kind of game
you&#8217;re playing. You determine the kind of game by choosing a particular
<B>GameElementFactory</B>, and then the <B>GameEnvironment</B> controls the
setup and play of the game. In this example, the setup and play is very simple,
but those activities (the <I>initial conditions</I> and the <I>state change</I>)
can determine much of the game&#8217;s outcome. Here, <B>GameEnvironment</B> is
not designed to be inherited, although it could very possibly make sense to do
that.</FONT><BR></DIV>
<DIV ALIGN="LEFT"><FONT FACE="Georgia">This also contains examples of <I>Double
Dispatching</I> and the <I>Factory Method</I>, both of which will be explained
later.</FONT><A NAME="_Toc524504128"></A><BR></DIV>
<A NAME="Heading54"></A><H2 ALIGN="LEFT">
Exercises</H2>
<OL>
<LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Add a class Triangle to
ShapeFactory1.java</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Add
a class <B>Triangle</B> to
<B>ShapeFactory2.java</B></FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Add
a new type of <B>GameEnvironment</B> called <B>GnomesAndFairies</B> to
<B>GameEnvironment.java</B></FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Modify
<B>ShapeFactory2.java</B> so that it uses an <I>Abstract Factory</I> to create
different sets of shapes (for example, one particular type of factory object
creates &#8220;thick shapes,&#8221; another creates &#8220;thin shapes,&#8221;
but each factory object can create all the shapes: circles, squares, triangles
etc.).</FONT></OL><DIV ALIGN="LEFT"><BR></DIV>
<DIV ALIGN="CENTER"><IMG SRC="images/r2hGlyph.gif"><BR>
<A HREF="mailto:chris@sunpack.com">chris@sunpack.com</A> Last Update:09/08/2001</DIV>

</BODY>

</HTML>
