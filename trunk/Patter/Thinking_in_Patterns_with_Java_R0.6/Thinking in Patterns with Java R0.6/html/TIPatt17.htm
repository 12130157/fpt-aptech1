<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<!--
This document was converted from RTF source: 
By rtftohtml 4.19
See http://www.sunpack.com/RTF
Filename:TIPatterns.rtf
Application Directory:c:\tools\rtf2html\
Subject:
Author:Bruce Eckel
Operator:Bruce Eckel
Document Comments:
Version Comments:
Comments:
Keywords:
Translation Date:09/08/2001
Translation Time:10:16:46
Translation Platform:Win32
Number of Output files:18
This File:TIPatt17.htm
SplitDepth=1
SkipNavPanel=1
SkipLeadingToc=1
SkipTrailingToc=1
GenContents=1
GenFrames=1
GenIndex=1
-->
<HEAD lang="en"><META http-equiv="Content-Type" content="text/html; charset=utf-8">
<TITLE>13: Projects</TITLE>
</HEAD>

<BODY  BGCOLOR="#FFFFFF"><DIV ALIGN="CENTER"><IMG SRC="images/r2hGlyph.gif"></DIV><A NAME="_Toc524504187"></A><A NAME="Heading114"></A><H1 ALIGN="LEFT">
13: Projects</H1>
<DIV ALIGN="LEFT"><FONT FACE="Georgia" SIZE=4>A number of more challenging
projects for you to solve. [[Some of these may turn into examples in the book,
and so at some point might disappear from
here]]</FONT><A NAME="_Toc524504188"></A><BR></DIV>
<A NAME="Heading115"></A><H2 ALIGN="LEFT">
Rats &amp; Mazes</H2>
<DIV ALIGN="LEFT"><FONT FACE="Georgia">First, create a <I>Blackboard</I> (cite
reference) which is an object on which anyone may record information. This
particular blackboard draws a maze, and is used as information comes back about
the structure of a maze from the rats that are investigating
it.</FONT><BR></DIV>
<DIV ALIGN="LEFT"><FONT FACE="Georgia">Now create the maze itself. Like a real
maze, this object reveals very little information about itself &#8212; given a
coordinate, it will tell you whether there are walls or spaces in the four
directions immediately surrounding that coordinate, but no more. For starters,
read the maze in from a text file but consider hunting on the internet for a
maze-generating algorithm. In any event, the result should be an object that,
given a maze coordinate, will report walls and spaces around that coordinate.
Also, you must be able to ask it for an entry point to the
maze.</FONT><BR></DIV>
<DIV ALIGN="LEFT"><FONT FACE="Georgia">Finally, create the maze-investigating
<B>Rat</B> class. Each rat can communicate with both the blackboard to give the
current information and the maze to request new information based on the current
position of the rat. However, each time a rat reaches a decision point where the
maze branches, it creates a new rat to go down each of the branches. Each rat is
driven by its own thread. When a rat reaches a dead end, it terminates itself
after reporting the results of its final investigation to the
blackboard.</FONT><BR></DIV>
<DIV ALIGN="LEFT"><FONT FACE="Georgia">The goal is to completely map the maze,
but you must also determine whether the end condition will be naturally found or
whether the blackboard must be responsible for the decision.</FONT><BR></DIV>
<DIV ALIGN="LEFT"><FONT FACE="Georgia">An example implementation by Jeremy
Meyer:</FONT><BR></DIV>

<PRE>//: c13:Maze.java
import java.util.*;
import java.io.*;
import java.awt.*;

public class Maze extends Canvas {
  private Vector lines; // a line is a char array
  private int width = -1;
  private int height = -1;
  public static void main (String [] args) 
  throws IOException {
    if (args.length &lt; 1) {
      System.out.println("Enter filename");
      System.exit(0);
    }
    Maze m = new Maze();
    m.load(args[0]);
    Frame f = new Frame();
    f.setSize(m.width*20, m.height*20);
    f.add(m);     
    Rat r = new Rat(m, 0, 0);
    f.setVisible(true);
  }
  public Maze() {
    lines = new Vector();
    setBackground(Color.lightGray);
  }
  synchronized public boolean 
  isEmptyXY(int x, int y) {
    if (x &lt; 0) x += width;
    if (y &lt; 0) y += height; 
    // Use mod arithmetic to bring rat in line:
    byte[] by = 
      (byte[])(lines.elementAt(y%height));  
    return by[x%width]==' ';
  }
  synchronized public void 
  setXY(int x, int y, byte newByte) {
    if (x &lt; 0) x += width;
    if (y &lt; 0) y += height; 
    byte[] by = 
      (byte[])(lines.elementAt(y%height));
    by[x%width] = newByte;
    repaint();
  }
  public void 
  load(String filename) throws IOException {
    String currentLine = null;
    BufferedReader br = new BufferedReader(
      new FileReader(filename));
    for(currentLine = br.readLine(); 
        currentLine != null;
        currentLine = br.readLine())  {
      lines.addElement(currentLine.getBytes());       
      if(width &lt; 0 || 
         currentLine.getBytes().length &gt; width)
        width = currentLine.getBytes().length;
    }
    height = lines.size();
    br.close();
  }       
  public void update(Graphics g) { paint(g); }
  public void paint (Graphics g) {
    int canvasHeight = this.getBounds().height;
    int canvasWidth  = this.getBounds().width;
    if (height &lt; 1 || width &lt; 1) 
      return; // nothing to do 
    int width = 
      ((byte[])(lines.elementAt(0))).length;
    for (int y = 0; y &lt; lines.size(); y++) {
      byte[] b;
      b = (byte[])(lines.elementAt(y));
      for (int x = 0; x &lt; width; x++) {
        switch(b[x]) {
          case ' ': // empty part of maze
            g.setColor(Color.lightGray);
            g.fillRect(
              x*(canvasWidth/width),
              y*(canvasHeight/height),
              canvasWidth/width,
              canvasHeight/height);
            break;
          case '*':     // a wall 
            g.setColor(Color.darkGray);
            g.fillRect(
              x*(canvasWidth/width),
              y*(canvasHeight/height),
              (canvasWidth/width)-1,
              (canvasHeight/height)-1);
            break;
          default:      // must be rat
            g.setColor(Color.red);
            g.fillOval(x*(canvasWidth/width),
            y*(canvasHeight/height),
            canvasWidth/width,
            canvasHeight/height);
            break;              
        }      
      }     
    }
  }
} ///:~</PRE><DIV ALIGN="LEFT"><BR></DIV>

<PRE>//: c13:Rat.java

public class Rat {
  static int ratCount = 0;
  private Maze prison;
  private int vertDir = 0; 
  private int horizDir = 0;
  private int x,y;
  private int myRatNo = 0;
  public Rat(Maze maze, int xStart, int yStart) {
    myRatNo = ratCount++;
    System.out.println("Rat no." + myRatNo + 
      " ready to scurry.");
    prison = maze;
    x = xStart;
    y = yStart;
    prison.setXY(x,y, (byte)'R');
    new Thread() {
      public void run(){ scurry(); }
    }.start();
  }
  public void scurry() {
    // Try and maintain direction if possible.
    // Horizontal backward
    boolean ratCanMove = true;
    while(ratCanMove) {
      ratCanMove = false;
      // South 
      if (prison.isEmptyXY(x, y + 1)) {
        vertDir = 1; horizDir = 0;         
        ratCanMove = true;
      }
      // North
      if (prison.isEmptyXY(x, y - 1))
        if (ratCanMove)
          new Rat(prison, x, y-1);
          // Rat can move already, so give 
          // this choice to the next rat.
        else {
          vertDir = -1; horizDir = 0;         
          ratCanMove = true;
        }
      // West
      if (prison.isEmptyXY(x-1, y))
        if (ratCanMove)
          new Rat(prison, x-1, y);   
          // Rat can move already, so give 
          // this choice to the next rat.
        else {
          vertDir = 0; horizDir = -1;         
          ratCanMove = true;
        }
      // East
      if (prison.isEmptyXY(x+1, y))
        if (ratCanMove)
          new Rat(prison, x+1, y);   
          // Rat can move already, so give 
          // this choice to the next rat.
        else {
          vertDir = 0; horizDir = 1;         
          ratCanMove = true;
        }
      if (ratCanMove) { // Move original rat.
        x += horizDir;
        y += vertDir;
        prison.setXY(x,y,(byte)'R');
      }  // If not then the rat will die.
      try {
        Thread.sleep(2000);   
      } catch(InterruptedException ie) {}
    }
    System.out.println("Rat no." + myRatNo + 
      " can't move..dying..aarrgggh.");
  }
} ///:~</PRE><DIV ALIGN="LEFT"><FONT FACE="Georgia">The maze initialization
file:</FONT><BR></DIV>

<PRE>//:! c13:Amaze.txt
   * **      *  * **      *
 ***    * *******    * ****
     ***          ***      
 *****   **********   *****
 * * * * **  ** * * * **  *
   * * *  * **  * * *  * **
 *     **     *     **     
   * **   * **  * **   * **
 *** *  *** ***** *  *** **
 *      *   * *      *   * 
   * ** * *     * ** * *   
///:~</PRE><DIV ALIGN="LEFT"><A NAME="_Toc524504189"></A><BR></DIV>
<A NAME="Heading116"></A><H3 ALIGN="LEFT">
Other maze resources</H3>
<DIV ALIGN="LEFT"><FONT FACE="Georgia">A discussion of algorithms to create
mazes as well as Java source code to implement them:</FONT><BR></DIV>
<DIV ALIGN="LEFT"><FONT FACE="Georgia"><A HREF="http://www.mazeworks.com/mazegen/mazegen.htm">http://www.mazeworks.com/mazegen/mazegen.htm</A>
</FONT><BR></DIV>
<DIV ALIGN="LEFT"><FONT FACE="Georgia">A discussion of algorithms for collision
detection and other individual/group moving behavior for autonomous physical
objects:</FONT><BR></DIV>
<DIV ALIGN="LEFT"><FONT FACE="Georgia"><A HREF="http://www.red3d.com/cwr/steer/">http://www.red3d.com/cwr/steer/</A>
</FONT><BR></DIV>
<DIV ALIGN="LEFT"><A NAME="_Toc524504190"></A><BR></DIV>
<A NAME="Heading117"></A><H2 ALIGN="LEFT">
XML Decorator</H2>
<DIV ALIGN="LEFT"><FONT FACE="Georgia">Create a pair of decorators for I/O
Readers and Writers that encode (for the Writer decorator) and decode (for the
reader decorator) XML</FONT><BR></DIV>
<DIV ALIGN="CENTER"><IMG SRC="images/r2hGlyph.gif"><BR>
<A HREF="mailto:chris@sunpack.com">chris@sunpack.com</A> Last Update:09/08/2001</DIV>

</BODY>

</HTML>
